// @ts-check
import { GoogleGenerativeAI } from "@google/generative-ai";

// For development, use environment variable
const EMBEDDED_API_KEY = process.env.GEMINI_API_KEY;

if (!EMBEDDED_API_KEY) {
  console.warn('‚ö†Ô∏è  GEMINI_API_KEY environment variable is not set');
  console.log('üí° Create a .env file with:');
  console.log('GEMINI_API_KEY=your_actual_api_key_here');
}

// Model configuration - using the latest stable model
const MODEL_NAME = "gemini-1.5-flash";

// Initialize the Google Generative AI client
const genAI = EMBEDDED_API_KEY ? new GoogleGenerativeAI(EMBEDDED_API_KEY) : null;

/**
 * Calls the Gemini API to generate content
 * @param {string} prompt - The prompt to send to the model
 * @param {string} [apiKey] - Optional API key (uses embedded key if not provided)
 * @returns {Promise<string>} The generated content
 * @throws {Error} If the API key is missing or the request fails
 */
export async function callGemini(prompt, apiKey) {
  const effectiveApiKey = apiKey || EMBEDDED_API_KEY;
  
  if (!effectiveApiKey) {
    throw new Error('Gemini API key is required. Please set GEMINI_API_KEY environment variable or provide an API key.');
  }

  // Use the embedded genAI instance if keys match, otherwise create a new one
  const client = effectiveApiKey === EMBEDDED_API_KEY && genAI 
    ? genAI 
    : new GoogleGenerativeAI(effectiveApiKey);

  try {
    const model = client.getGenerativeModel({ model: MODEL_NAME });
    const result = await model.generateContent(prompt);
    const response = await result.response;
    return response.text();
  } catch (error) {
    console.error('‚ùå Error calling Gemini API:', error.message);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    throw new Error(`Failed to generate content: ${error.message}`);
  }
}

/**
 * Lists all available models for the API key
 * @param {string} [apiKey] - Optional API key (uses embedded key if not provided)
 * @returns {Promise<Array>} List of available models
 */
export async function listAvailableModels(apiKey) {
  const effectiveApiKey = apiKey || EMBEDDED_API_KEY;
  
  if (!effectiveApiKey) {
    throw new Error('Gemini API key is required to list models');
  }

  try {
    const client = effectiveApiKey === EMBEDDED_API_KEY && genAI 
      ? genAI 
      : new GoogleGenerativeAI(effectiveApiKey);
      
    const model = client.getGenerativeModel({ model: MODEL_NAME });
    
    // Test if we can use the model
    await model.generateContent({
      contents: [{ role: 'user', parts: [{ text: 'Hello' }] }]
    });
    
    // If we get here, the model is available
    return [{ name: MODEL_NAME }];
  } catch (error) {
    console.error('‚ùå Error listing models:', error.message);
    throw error;
  }
}
